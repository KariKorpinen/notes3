{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"qNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACfC,EAAQF,EAAKG,UACjB,qBAAuB,iBACxB,OACE,wBAAIC,UAAU,QACVJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCK5BK,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGP,yBAAKJ,UAAU,SACZI,ICSQC,EAfA,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uG,gBCeS,EAtBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJb,QAAS,mCACTc,KAAM,2BACNhB,WAAW,GAGb,OAAOW,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAfR,aAesBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UApBF,aAoBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCkI5BK,EA5IH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAUcF,mBAAS,IAVvB,mBAUTG,EAVS,KAUAC,EAVA,OAWcJ,oBAAS,GAXvB,mBAWTK,EAXS,KAWAC,EAXA,OAawBN,mBAAS,MAbjC,mBAaTO,EAbS,KAaKC,EAbL,KAehBC,qBAAU,WACPC,IAEIlB,MAAK,SAAAmB,GACJT,EAASS,QAYd,IAGH,IAsEMC,EAAcP,EACfJ,EACAA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAI/B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAAS2B,IACvB,6BACG,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACSA,EAAU,YAAc,QAGpC,4BACGO,EAAYE,KAAI,SAAC1C,EAAM2C,GAAP,OACf,kBAAC,EAAD,CACGC,IAAKD,EACL3C,KAAMA,EACNC,iBAAkB,kBA3DF,SAACiB,GACjB,sCAAkCA,GAA3C,IACMlB,EAAO6B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,eAAQ/C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDmC,EACWpB,EAAI6B,GACX3B,MAAK,SAAA4B,GACHlB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKkB,KAAOA,EAAKlB,EAAOgD,SAMxDC,OAAM,SAAAC,GACJd,EAAgB,SAAD,OACJpC,EAAKK,QADD,sCAGf8C,YAAW,WACRf,EAAgB,QAChB,QAuC2BgB,CAAmBpD,EAAKkB,WAIvD,0BAAMmC,SA9FM,SAACC,GACbA,EAAMC,iBAGN,IAAMC,EAAa,CAChBnD,QAAS0B,EACTZ,MAAM,IAAIsC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3B1C,GAAIW,EAAMgC,OAAS,GAGtBvB,EACWkB,GACJpC,MAAK,SAAA4B,GACNlB,EAASD,EAAMN,OAAOyB,IAGtBhB,EAAW,SA8Ed,2BACG8B,MAAO/B,EACPgC,SAlCe,SAACT,GAEvBtB,EAAWsB,EAAMU,OAAOF,UAkCpB,4BAAQG,KAAK,UAAb,SAEH,kBAAC,EAAD,Q,MCpHNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1360fa49.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n\tconst label = note.important\r\n\t? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'>\r\n       {note.content}\r\n       <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/api/notes'\r\n//const baseUrl = 'https://agile-plateau-72113.herokuapp.com/api/notes'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  //return request.then(response => response.data)\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update }\r\n\r\n  //getAll: getAll, \r\n  //create: create, \r\n  //update: update \r\n//}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\n\n//const App = () => {\n  //define with empty array\n//  const [notes, setNotes] = useState([])\n\n//const App = (props) => {\n  //const [notes, setNotes] = useState(props.notes)\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  //event 0 tapahtuma\n  //preventDefault = estää lomakkeen lähetyksen oletusarvoisen toiminnan, \n  //joka aiheuttaisi mm. sivun uudelleenlatautumisen.\n  \n  //use default box in textbax\n  //const [newNote, setNewNote] = useState(\n  //   'a new note...'\n  //)\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  //const [errorMessage, setErrorMessage] = useState('some error happened...')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n     noteService\n        .getAll()\n        .then(initialNotes => {\n          setNotes(initialNotes)\n       })\n        //.then(response => {\n        //   setNotes(response.data)\n        //})\n    /* console.log('effect')\n     axios\n        .get('http://localhost:3001/notes')\n        .then(response => {\n           console.log('promise fulfilled')\n           setNotes(response.data)\n        })*/  \n  }, [])  \n  //console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n      event.preventDefault()\n      //console.log('button clicked', event.target)\n      //event.target = tapahtuman kohde\n      const noteObject = {\n         content: newNote,\n         date: new Date().toISOString(),\n         important: Math.random() > 0.5,\n         id: notes.length + 1,\n      }\n\n      noteService      \n         .create(noteObject)\n            .then(returnedNote => {\n            setNotes(notes.concat(returnedNote))\n         //.then(response => {\n         //   setNotes(notes.concat(response.data))\n            setNewNote('')\n         })\n      /*\n      axios\n         .post('http://localhost:3001/notes', noteObject)\n         .then(response => {\n          console.log(response)\n          setNotes(notes.concat(response.data))\n          setNewNote('')\n         })\n     \n      setNotes(notes.concat(noteObject))\n      setNewNote('')*/\n  }\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n       .update(id, changedNote)\n       .then(returnedNote => { \n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n       //.then(response => {\n       //   setNotes(notes.map(note => note.id !== id ? note : response.data))\n    //axios.put(url, changedNote).then(response => {\n    \n    })\n    .catch(error => {\n       setErrorMessage(\n         `Note '${note.content}' was already removed from server`   \n       )    \n       setTimeout(() => {\n          setErrorMessage(null)\n       }, 5000)\n        //  setNotes(notes.filter(n => n.id !== id))\n       \n       //alert(\n       //  `the note '${note.content}' was already deleted from server`\n       //)\n       //setNotes(notes.filter(n => n.id !== id))\n       })\n     //console.log('importance of ' + id + ' needs to be toggled')\n     //console.log(`importance of ${id} needs to be toggled`)\n    }\n\n  const handleNoteChange = (event) => {\n     //console.log(event.target.value)\n     setNewNote(event.target.value)  \n  }\n  \n\n\n  const notesToShow = showAll\n     ? notes\n     : notes.filter(note => note.important)\n     //: notes.filter(note => note.important === true)\n     //: notes.filter(note => note.important === true)\n  //{notes.map((note, i) =>\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n         <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all' }\n         </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => \n          <Note \n             key={i} \n             note={note}\n             toggleImportance={() => toggleImportanceOf(note.id)}\n           />\n        )} \n      </ul>\n      <form onSubmit={addNote}>\n         <input \n            value={newNote} \n            onChange={handleNoteChange} \n          />\n         <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n//import Note from './components/Note'\nimport App from './App'\nimport './index.css'\n//import axios from 'axios'\n\n/*const promise = axios.get('http://localhost:3001/notes')\nconsole.log(promise)\n\npromise.then(response => {\n  console.log(response)\n})\n*/\n/*\naxios\n  .get('http://localhost:3001/notes')\n  .then(response => {\n    const notes = response.data\n    console.log(notes)\n  })\n*/\n/*\naxios\n  .get('http://localhost:3001/notes')\n  .then(response => {\n    const notes = response.data\n     ReactDOM.render(\n    <App notes={notes} />,\n    document.getElementById('root')\n  )\n  })\n*/\nReactDOM.render(<App />, document.getElementById('root'))\n//const promise2 = axios.get('http://localhost:3001/foobar')\n//console.log(promise2) - tulostuu virheilmoitus - ei löydy\n\n/*\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2020-01-10T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only Javascript',\n    date: '2020-01-10T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2020-01-10T19:20:14.298Z',\n    important: true\n  }\n]\n\n//const Note = ({ note }) => {\n//   return (\n//      <li>{note.content}</li>\n//   )\n//}\n\n//const App = (props) => {\n//  const { notes } = props\n/*const App = ({notes}) => {\n  return (\n    <div>\n       <h1>Notes</h1>\n       <ul>\n          {notes.map((note, i) =>\n             <Note key={i} note={note} />\n          )}\n       </ul>\n    </div>\n  )\n}*/\n\n/*ReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)*/\n\n//<li>{notes[0].content}</li>)\n//<li>{notes[1].content}</li>\n//<li>{notes[2].content}</li>"],"sourceRoot":""}